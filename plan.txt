

ant senses:

The ant can only see how many spaces in a direction are available.

Opticals are 2 things: Wall and a Mark (it can't tell the difference)

ant itches:

The ant does something called a check (in any direction)

If the ant sees open space, it gets an "itch."
There are 4 types of itches for every direction.
The itch holds how many spaces are available in front.

ONLY ONCE IT GET AN itch, it does a cautious jump or bold jump


cautious jump:

when it gets an itch that gives it a direction and space, it can do a cautious jump.
what this does is that it moves one space in the direction of the itch.

bold jump:
bold jump is similar to a cautious jump, but it goes the entire distance to the itch spaces


memory:

he can remember (x,y) locations. there a contest set of the max location he can remember.
He can only see the most recent memory he created.

The way he sees his recent memory is to "Pop", retrieving the memory and forgetting, or to "Peek", retrieving the memory and keeping it.

NOTE: It can only remember recent memory. The way to see one past it is to "Pop", the memory.


ant rules:

1 if there's an adjacent open space, create that spot as a neighbor 
2 

~~~~~~~~~~~~~
TODO: (more will be added or changed later on)
//please fix any mistakes or errors
--- Structure phase ---
1. make the functions for the ant in ant.c (define variables and functions)
    - set header functions (making the bones)
2. implement ADT memory (stack) - memory will hold positions value, so 2 stacks: one holding x value and the other holding y values. (Makeshift 2d vector list?)
//example: int memory [MAX_SIZE][MAX_SIZE] = { [x1, x2, x3], 
//                                             [y1, y2, y3] };
    - then implement ant.c functions, basically adding flesh on the bones  
3. find a way to load the maze map into the program (maybe use the stack.c file?)
    - maybe use 2d arrays?
    - must be read from a text file, so file reader time
    - define each character as something appropriate for the ant to recognize, like walls, spaces and gold pot
4. Testing phase 1?
    - create a testing program to test ant functionality and interactions with the maze
    - how will we create interface?
        - I'm thinking of using scanf bc it pauses the program
        - then maybe display the maze and the position of the ant? ASCII map
--- Algorithm phase ---
//  this is the most troubling part of the project.
5. the ant has to read a set of instructions from input file
    - make a program that reads them from input file
    - find a way to store that set of instruction so that the ant can execute functions based on them
6. devise an algorithm that will bring us victory
    - most sweaty task
7. idk, like test simulate? lol
    - this time we cant pause because no scanf
    - maybe command prompt manager something? display the maze, immediately clear, and then redisplay maze? (of course with delay otherwise it would be too fast)
8. now what? i guess we relax. maybe hope that the code works
